{"version":3,"file":"importmappingdialogue.min.js","sources":["../src/importmappingdialogue.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript module for deleting a database as a preset.\n *\n * @module      mod_data/importmappingdialogue\n * @copyright   2022 Amaia Anabitarte <amaia@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Notification from 'core/notification';\nimport Ajax from 'core/ajax';\nimport Url from 'core/url';\nimport Templates from 'core/templates';\nimport Modal from 'core/modal';\n\nconst selectors = {\n    selectPresetButton: 'input[name=\"selectpreset\"]',\n};\n\n/**\n * Initialize module\n */\nexport const init = () => {\n    registerEventListeners();\n};\n\n/**\n * Register events for user preset button.\n */\nconst registerEventListeners = () => {\n    document.addEventListener('click', (event) => {\n        const usepreset = event.target.closest(selectors.selectPresetButton);\n        if (usepreset) {\n            event.preventDefault();\n            mappingdialogue(usepreset);\n        }\n    });\n};\n\n/**\n * Show the confirmation modal to delete the preset.\n *\n * @param {HTMLElement} usepreset the preset to import.\n */\nconst mappingdialogue = (usepreset) => {\n    const presetName = usepreset.getAttribute('data-presetname');\n    const dataId = usepreset.getAttribute('data-id');\n\n    showMappingDialogue(dataId, presetName).then((result) => {\n    if (!result.needsmapping) {\n        window.location.href = Url.relativeUrl(\n            'mod/data/field.php',\n            {\n                d: dataId,\n                mode: 'usepreset',\n            },\n            false\n        );\n    }\n    const cancelButton = Url.relativeUrl(\n           'mod/data/preset.php',\n           {\n               d: dataId,\n           },\n           false\n       );\n    result['cancel'] = cancelButton;\n    const mapButton = Url.relativeUrl(\n           'mod/data/field.php',\n           {\n               d: dataId,\n               mode: 'usepreset',\n               action: 'select'\n           },\n           false\n       );\n    result['mapfieldsbutton'] = mapButton;\n    const applyButton = Url.relativeUrl(\n           'mod/data/field.php',\n           {\n               d: dataId,\n               mode: 'usepreset',\n               action: 'select'\n           },\n           false\n       );\n    result['applybutton'] = applyButton;\n    let modalPromise = Templates.render('mod_data/fields_mapping_modal', result);\n    modalPromise.then(function(html) {\n        return new Modal(html);\n    }).fail(Notification.exception)\n        .then((modal) => {\n            modal.show();\n            return modal;\n        }).fail(Notification.exception);\n        return result;\n    }).catch(err => {\n        Notification.exception(err);\n    });\n};\n\n/**\n * Check whether we should show the mapping dialogue or not.\n *\n * @param {int} dataId The id of the current database activity.\n * @param {string} presetName The preset name to delete.\n * @return {promise} Resolved with the result and warnings of deleting a preset.\n */\nasync function showMappingDialogue(dataId, presetName) {\n    var request = {\n        methodname: 'mod_data_get_mapping_information',\n        args: {\n            dataid: dataId,\n            import: presetName,\n        }\n    };\n    return Ajax.call([request])[0];\n}\n"],"names":["selectors","registerEventListeners","document","addEventListener","event","usepreset","target","closest","preventDefault","mappingdialogue","presetName","getAttribute","dataId","request","methodname","args","dataid","import","Ajax","call","showMappingDialogue","then","result","needsmapping","window","location","href","Url","relativeUrl","d","mode","cancelButton","mapButton","action","applyButton","Templates","render","html","Modal","fail","Notification","exception","modal","show","catch","err"],"mappings":";;;;;;;sSA6BMA,6BACkB,2CAMJ,KAChBC,gCAMEA,uBAAyB,KAC3BC,SAASC,iBAAiB,SAAUC,cAC1BC,UAAYD,MAAME,OAAOC,QAAQP,8BACnCK,YACAD,MAAMI,iBACNC,gBAAgBJ,gBAUtBI,gBAAmBJ,kBACfK,WAAaL,UAAUM,aAAa,mBACpCC,OAASP,UAAUM,aAAa,2BA8DPC,OAAQF,gBACnCG,QAAU,CACVC,WAAY,mCACZC,KAAM,CACFC,OAAQJ,OACRK,OAAQP,oBAGTQ,cAAKC,KAAK,CAACN,UAAU,IApE5BO,CAAoBR,OAAQF,YAAYW,MAAMC,SACzCA,OAAOC,eACRC,OAAOC,SAASC,KAAOC,aAAIC,YACvB,qBACA,CACIC,EAAGjB,OACHkB,KAAM,cAEV,UAGFC,aAAeJ,aAAIC,YAClB,sBACA,CACIC,EAAGjB,SAEP,GAEPU,OAAM,OAAaS,mBACbC,UAAYL,aAAIC,YACf,qBACA,CACIC,EAAGjB,OACHkB,KAAM,YACNG,OAAQ,WAEZ,GAEPX,OAAM,gBAAsBU,gBACtBE,YAAcP,aAAIC,YACjB,qBACA,CACIC,EAAGjB,OACHkB,KAAM,YACNG,OAAQ,WAEZ,UAEPX,OAAM,YAAkBY,YACLC,mBAAUC,OAAO,gCAAiCd,QACxDD,MAAK,SAASgB,aAChB,IAAIC,eAAMD,SAClBE,KAAKC,sBAAaC,WAChBpB,MAAMqB,QACHA,MAAMC,OACCD,SACRH,KAAKC,sBAAaC,WACdnB,UACRsB,OAAMC,4BACQJ,UAAUI"}